<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>go on kfns0b11's blog</title><link>https://kfns0b11.github.io/tags/go/</link><description>Recent content in go on kfns0b11's blog</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><copyright>© kfn0b11</copyright><lastBuildDate>Thu, 28 Oct 2021 23:59:44 +0800</lastBuildDate><atom:link href="https://kfns0b11.github.io/tags/go/index.xml" rel="self" type="application/rss+xml"/><item><title>Go 语言闭包及其应用</title><link>https://kfns0b11.github.io/posts/goclosure/</link><pubDate>Thu, 28 Oct 2021 23:59:44 +0800</pubDate><guid>https://kfns0b11.github.io/posts/goclosure/</guid><description>匿名函数 在学习 Go 语言闭包之前，需要先对匿名函数有所了解。匿名函数与常规函数的不同点在于：匿名函数没有指定函数名称，一般用法为在原地执行一次或者赋值给一个变量供以后使用。
func main() { // execute locally func() { fmt.Println(&amp;#34;Anonymous function execute locally!&amp;#34;) }() // assign to a variable var anonyfunc func() = func() { fmt.Println(&amp;#34;Anoymous function assign to a variable anonyfunc&amp;#34;) } anonyfunc() // change value of anonyfunc anonyfunc = somefunc anonyfunc() } func somefunc() { fmt.Println(&amp;#34;some standard func&amp;#34;) } 这段代码简单展示了匿名函数原地执行和赋值给变量执行的例子，并且在运行期间改变了 anonyfunc 的值。</description></item></channel></rss>